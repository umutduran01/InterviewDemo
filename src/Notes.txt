3 Important Components of Cucumber;
    1) Feature File - We use Gherkin language in this file and write hte scenario.
    2) Step Definition - We write the code in this file.
    3) Test Runner - We execute the code.

    When we make any change in Features file, we need to change in Step Definitions file as well.

dryRun = true;
    It indicates that the operation will not have any real effect or impact on the system or environment, but will instead provide a preview, so we can our missing codes there.

Commenting in feature file;
    We can use # to comment in feature file.

Tagging in Cucumber;
    When we want to tag some specific tests, we can add an annotation before scenario such as @smoke. To run this case, in TestRunner we add a new parameter such as tags = "@smoke".
    We can also execute multiple tags by using "or" : tags = "@test1 or @test2"
    To execute cases with more tags, use "and" between instead of "or".

plugin = {"pretty"}
    It is a parameter that we use in test class to make console more readable.

Hooks:
    For defining pre and post steps in any Cucumber framework.
    This is always created in StepDefinition folder.
    This class cannot be inherited.

    !! While creating Hooks, you should see "import io.cucumber.java.Before;".

    If there is a Hooks class in the framework, it will always be executed.

    If we want to perform another action beside Hooks methods, we should tag the case and create a new Hooks methods and also tag as @Before(value = "@tag")

Background:
    If there are common steps in the same feature file, we can add those steps to background, so we do not need to repeat.
    Those steps will execute till the flow is broken.

"Regular Expression":
    While writing features, we can add parameter as "string" so it will be pushed to StepDefinitions.

Scenario Outline:
    This is another way of passing value in Cucumber. We can achieve parametrization and data driven with this way.
    This method provides us a different way of data driven testing.
    It is always used with the keyword 'Examples'
    Parametrization is testing the same function with different values such as different username and password.
    Data driven is fetching the values from an external source such as Excel.

------------------------------------------------------------------------------------------------------------------------
WAY OF PASSING VALUE
1) Hard Code
2) Property File
3) Regular Expression
4) Scenario Outline
5) Data Table
------------------------------------------------------------------------------------------------------------------------

Data Table:
    The biggest difference between Scenario Outline and Data Table is that, when we use Data Table, the browser starts only once and passes all values. That's why
    it is a good practice to logout when it logs in first.

Page Object Model (POM):
    It is an object that holds all web elements of a specific web page. It is also called as object repository.
        1) Every POM should inherit CommonMethods class
        2) Define your WebElements[public] - Page Factory Model
            Example:
                @FindBy(id = "xzy")
                WebElement username;

        3) Create constructor to initialize web elements on the current page.
            Example:
                public LoginPage() {
                        PageFactory.initElements(driver, this);
                    }

    POM uses separate classes for each page in the application, while Page Factory Model uses annotations and lazy initialization for defining and accessing web elements.

Page Initializer:
    By this class, we will manage the object creation of different page objects in our framework.
    Instead of calling the page object everytime, this class will take care of it.

Target Folder:
    This folder is mostly used for storing test execution reports generated by Cucumber.

Apache POI:
    We use this dependency to handle Excel sheets in Java.
        Apache POI Common,
        Apache POI API Based On OPC and OOXML Schemas,
        Apache Commons IO

Taking Screenshot:
    1) We use Commons OI to take screenshots in Cucumber.
    2) Then we created 2 methods in CommonMethods called takeScreenshot and getTimeStamp.
    3) Then we called takeScreenshot method in Hooks.
    4) In the end, we attached the screenshot to the report.

Single Point of Execution:
    We use Maven Surefire Plugin to execute all cases from one point.
    When we want to execute our cases,
        1) Go to Maven,
        2) Then go to Lifecycle
        3) And run test option.

    !! To execute more test classes from this option, go to pom.xml and add <include>**/*CLASSNAME.java</include>

Better Reports:
    To have better reports in Cucumber we have used https://github.com/damianszczepanik/maven-cucumber-reporting.

    Do not forget to change project name and check the asterisks when you copy and paste.

Create Logs:
    To create Logs in Cucumber we use "log4j" (https://mvnrepository.com/artifact/log4j/log4j/1.2.17).
    After adding this dependency we need to create a "log4j.xml" file in project file and pass code.
    Then we can add "Log" class in "Utils" file and create methods.
    In the end, we add those methods to common methods.
    When we execute our test, "logfile.log" will be created.

MAVEN LIFECYCLE:
    It consists of several phases;
        1) clean: removes all the files that generated by the previous build
        2) validate: checks the project is correct and all necessary info is available
        3) compile: compiles the source code of the project
        4) test: runs tests for the project
        5) package: packages the compiled code into distributable format such as JAR or WAR
        6) verify: runs and checks on results of integration tests to ensure quality criteria is meet
        7) install: installs the packages into local repos. ".m2" file keeps all dependencies
        8) site: generates documentation for the project
        9) deploy: copies the final package to remote repo for sharing with other devs

------------------------------------------------------------------------------------------------------------------------
                                                     -JDBC NOTES-
CREATING CONNECTION WITH DATABASE:
    We used MySQLConnector dependency.

    We need 3 things to work with a DB:
        1)Address of DB - url
        2)Name of DB
        3)Username, password

    - Connection class is used to establish a connection with DB.
    - Make a statement that allows you to send query to the DB.
    - Use ResultSet to store the result in its object.

        -rset.next() - to shift the cursor to the next line.
        -ResultSetMetaData - it contains info about the result such as how many columns, rows are there, name of colums/rows etc.

    When we DB code with framework, we will pass url, username nad password in config.prop file.
